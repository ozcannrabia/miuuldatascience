##################################
# VERİ YAPILARI (DATA STRUCTURES)
####################################
# - Veri yapılarına giriş ve hızlı özet
# - Sayılar (Numbers): int, float, complex
# - Karakter dizileri (strings) : str
# - Boolen (TRUE-FALSE): bool
# - Liste (list)
# - Sözlük (Dictionary)
# - Demet (Tuple)
# - Set


############################################
# Veri Yapılarına Giriş ve Hızlı Özet
#########################################

# Sayılar: integer
x = 46
type(x)

# Sayılar: float
x = 10.3
type(x)

# Sayılar: complex
x= 2j + 1
type(x)

# String
x = "Hello ai era"
type(x)

# Boolean
True
False
type(True)
5 == 4
3 == 2
1 == 1
type(3 == 2)

# Liste
x = ["btc","eth","xrp"]
type(x)

# Sözlük (dictionary)
x = {"name": "Peter", "Age": 36}
type(x)

# Tuple
x = ("pyhton","ml","ds")
type(x)

# Set
x = {"python","ml","ds"}
type(x)

# NOT : liste, tuple, set ve dictionary veri yapıları aynı zamanda Python Collecitons (Arrays) olarak geçmektedir.


#########################################
# Sayılar (Numbers): int, float, complex
##########################################

a = 5
b = 10.5

a * 3
a / 7
a * b / 10
a ** 2

############################
# Tipleri değiştirmek
###########################

int(b)
float(a)

int(a * b / 10)

c = a * b / 10

int(c)


####################################
# Karakter Dizileri (Strings)
#########################################

print("John")
print('John')

"John"
name = "John"
name = 'John'

######################
# Çok Satırlı Karakter Dizileri
########################

""" Veri yapıları: Hızlı Özet,
Sayılar(Numbers): int,float , complex,
Karakter Dizileri (Strings): str,
List,Dictionary,Tuple,Set,
Boolen ( TRUE- FALSE): bool"""

long_str = """ Veri yapıları: Hızlı Özet,
Sayılar(Numbers): int,float , complex,
Karakter Dizileri (Strings): str,
List,Dictionary,Tuple,Set,
Boolen ( TRUE- FALSE): bool"""

###################################
# Karakter Dizilerinde Elemanlarına Erişmek
###################################

name
name[0]
name[3]
name[2]

############################
# Karakter Dizilerinde Slice İşlemi
###########################

name[0:2]

long_str[0:10]
##########################
# String İçerisinde Karakter Sorgulamak
#########################

long_str

"veri" in long_str

"Veri" in long_str

"bool" in long_str

########################################
# String (Karakter Dizisi ) Metodları
#####################################

dir(str)

#########################
# len
#########################

name = "john"
type(name)
type(len)

len(name)
len("rabiaozcan")
len("miuul")

#############################
# upper() & lower(): küçük-büyük dönüşümleri
######################

"miuul".upper() #büyütmek
"MIUUL".lower() #küçültmek

# type(upper)
# type((upper))


##########################
# replace: karakter değiştirir
##########################

hi = "Hello AI Era"
hi.replace("l", "p")

########################
# split: böler
###########################

"Hello AI Era".split()

##########################
# strip: kırpar
######################

" ofofo ".strip()
"ofofo ".strip("o")


##########################
# capitalize: ilk harfi büyütür
#########################

"foo".capitalize()

dir("foo")

"foo".startswith("f")

################################
# Liste (list)
##################################

# - Değiştirilebilir
# - Sıralıdır. Index işlemleri yapılabilir.
# - Kapsayıcıdır.

notes = [1, 2, 3, 4]
type(notes)
names = ["a", "b", "v", "d"]
not_nam = [1, 2, 3, "a", "b", True, [1, 2, 3]]

not_nam[0]
not_nam[5]
not_nam[6]
not_nam[6][1]

type(not_nam[6])

type(not_nam[6][1])

notes[0] = 99

not_nam[0:4]


#################################
# Liste Metodları (List Methods)
###################################

dir(notes)

###########################
# len: builtin python fonksiyonu, boyut bilgisi.
############################

len(notes)
len(not_nam)

############################
# append: eleman ekler
###########################

notes
notes.append(100)

###########################
# pop: indexe göre siler
#########################

notes.pop(0)

#########################
# insert: indexe ekler
###########################

notes.insert(2, 99)


#########################################
# Sözlük ( Dictionary)
########################################

# Değiştirilebilir
# Sırasız ( 3.7 sonra sıralı.)
# Kapsayıcı

# key-value

dictionary = {"REG": "Regression",
              "LOG":"Logistic Regression",
              "CART":"Classification and Reg"}

dictionary["REG"]


dictionary =  {"REG": ["RMSE",10],
              "LOG": ["MSE", 20],
              "CART":["SSE",30]}

dictionary =  {"REG": 10,
              "LOG": 20,
              "CART":30}

dictionary["CART"][1]

##############################
# Key Sorgulama
###########################
#"REG" in dictionary
"YSA" in dictionary

##############################
# Key'e Göre Value'ya Erişmek
##############################

dictionary["REG"]
dictionary.get("REG")

################################
# Value Değiştirmek
##############################

dictionary["REG"] = ["YSA", 10]

#####################
# Tüm Key'lere Erişmek
#######################

dictionary.keys()
